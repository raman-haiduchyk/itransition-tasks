
@{
    ViewBag.Title = "Index";
}

<script src="~/signalr/hubs"></script>
<style>
    table {
        margin: 0 auto;
        table-layout: fixed;
        font-size: 50px;
    }

        table td {
            width: 100px;
            height: 100px;
        }

        table tr {
            border-bottom: 3px solid black;
        }

            table tr:last-child {
                border-bottom: none;
            }

        table td {
            border-right: 3px solid black;
        }

            table td:last-child {
                border-right: none;
            }
</style>


<main class="container text-center">
    <p id="status" class="help-block"></p>
    <div id="board">
    </div>
</main>


<script id="board-template" type="text/x-handlebars-template">
    <table>
        <tbody>
            {{#each Pieces}}
            <tr>
                {{#each this}}
                <td id="pos-{{@@../index}}-{{@@index}}">{{this}}</td>
                {{/each}}
            </tr>
            {{/each}}
        </tbody>
    </table>
</script>


<script type="text/javascript">var isCreator = false;</script>

@if (ViewBag.Creator != null)
{
    <script type="text/javascript">
        var tags = [];
        const gamename = "@ViewBag.Creator";
        isCreator = true;
    </script>

    foreach (var tag in ViewBag.Tags)
    {
        <script type="text/javascript">
            tags.push("@tag");
        </script>
    }
}

<script type="text/javascript">
    const gameHub = $.connection.gameHub;
    $.connection.hub.logging = true;

    $.connection.hub.error(function (error) {
        console.log('SignalR error: ' + error)
    });
    $.connection.hub.start().done(function () {
        if (isCreator) {
            gameHub.server.createGame(gamename);
            tags.forEach(tag => gameHub.server.addGameTag(tag));
        } else {
            id = "@ViewBag.Id";
            console.log(id);
            gameHub.server.joinGame(id);
        }
    });

    $(function () {

        gameHub.client.playerJoined = function (player) {
            playerId = player.Id;
        };


        gameHub.client.opponentLeft = function () {
            $('#status').html("Opponent has left. Game over.");
            endGame();
        };

        gameHub.client.waitingList = function () {
            $('#status').html("Waiting for an opponent.");
        };

        gameHub.client.start = function (game) {
            buildBoard(game.Board);
            var opponent = getOpponent(game);
            displayTurn(game.WhoseTurn, true);
        };

        gameHub.client.notPlayersTurn = function () {
            $('#status').html("Please wait your turn.");
        };

        gameHub.client.notValidMove = function () {
            $('#status').html("Please choose another location.");
        };

        gameHub.client.piecePlaced = function (row, col, piece) {
            $('#pos-' + row + '-' + col).html(piece);
        };

        // TODO: can be combined with piecePlaced by having the server
        // send the whole game object, render the board and update in one method
        gameHub.client.updateTurn = function (game) {
            displayTurn(game.WhoseTurn);
        };

        // Handle the tie game - game over scenario
        gameHub.client.tieGame = function () {
            $('#status').html("Tie!");
            endGame();
        };

        // Handle the tie game - game over scenario
        gameHub.client.winner = function (playerName) {
            $('#status').html("Winner: " + playerName);
            endGame();
        };


        // Game over business logic should disable board button handlers and
        // allow player to join a new game
        function endGame() {
            // Remove click handlers from board positions
            $('td[id^=pos-]').off('click');
        };

        // Display whose turn it is
        function displayTurn(playersTurn, isDisplayingOpponent) {
            var turnMessage = "";
            if (playerId == playersTurn.Id) {
                turnMessage = "Your turn";
            } else {
                turnMessage = playersTurn.Id + "\'s turn";
            }

            // Do not overwrite opponent's name if it is being displayed
            if (isDisplayingOpponent) {
                $('#status').html($('#status').html() + turnMessage);
            } else {
                $('#status').html(turnMessage);
            }
        };


        // Build and display the board
        function buildBoard(board) {
            var template = Handlebars.compile($('#board-template').html());
            $('#board').html(template(board));

            // attach click handlers to each position
            $('td[id^=pos-]').click(function (e) {
                e.preventDefault();
                var id = this.id; // "pos-0-0"
                var parts = id.split("-"); // [pos, 0, 0]
                var row = parts[1];
                var col = parts[2];
                gameHub.server.placePiece(row, col);
            });
        };

        // Retrieves the opponent player from the game
        function getOpponent(game) {
            if (playerId == game.Player1.Id) {
                return game.Player2;
            } else {
                return game.Player1;
            }
        };
    })
</script>


